generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model owners {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamp(6)

  user_id    String  @unique(map: "owners_user_id") @db.VarChar(255)
  admin_flag Boolean @default(false)

  owner_details_id Int?           @unique(map: "owner_details_id")
  owner_details    owner_details? @relation(fields: [owner_details_id], references: [id], onDelete: Cascade, map: "owner_details_fk")

  tags tags[]
}

model owner_details {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamp(6)

  name                      String  @db.VarChar(255)
  phone_number              String  @db.VarChar(255)
  phone_number_additional_1 String? @db.VarChar(255)
  phone_number_additional_2 String? @db.VarChar(255)
  email                     String  @db.VarChar(255)
  email_additional          String? @db.VarChar(255)
  street_address            String? @db.VarChar(255)
  apt_suite_unit            String? @db.VarChar(255)
  city                      String? @db.VarChar(255)
  state                     String? @db.VarChar(255)
  zipcode                   String? @db.VarChar(255)

  owner owners?
}

model tags {
  id         BigInt   @id @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamp(6)

  registered Boolean @default(false)
  TAG_TOKEN  String  @unique(map: "tag_token") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  setup_key  String  @default(dbgenerated("concat(concat(upper(LEFT(REGEXP_REPLACE(md5(random()::text),'[[:digit:]]','','g'), 3)), '-'), concat(concat(concat(floor(random() * (9-0+1) + 0)::int, floor(random() * (9-0+1) + 0)::int), floor(random() * (9-0+1) + 0)::int)),floor(random() * (9-0+1) + 0)::int)")) @db.VarChar(13)

  owner_id            Int?
  owner               owners?            @relation(fields: [owner_id], references: [id], onDelete: Cascade, map: "owner_fk")
  tag_details_id      Int?               @unique(map: "tag_details_id")
  tag_details         tag_details?       @relation(fields: [tag_details_id], references: [id], onDelete: Cascade, map: "tag_details_fk")
  zip_download_urls   zip_download_urls? @relation(fields: [zip_download_urlsId], references: [id])
  zip_download_urlsId Int?
}

model tag_details {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamp(6)

  name             String    @db.VarChar(255)
  photo_url        String?   @db.VarChar(255)
  bio              String?   @db.Text()
  birthday         DateTime? @db.Timestamp(6)
  breed            String?   @db.VarChar(255)
  gender           String?   @db.VarChar(255)
  microchip_number String?   @db.VarChar(255)
  neutered_spayed  Boolean?  @default(false)
  behaviour        String?   @db.Text()
  allergies        String?   @db.Text()

  uses_owners_information          Boolean @default(true)
  parent_name                      String  @db.VarChar(255)
  parent_phone_number              String  @db.VarChar(255)
  parent_phone_number_additional_1 String? @db.VarChar(255)
  parent_phone_number_additional_2 String? @db.VarChar(255)
  parent_email                     String  @db.VarChar(255)
  parent_email_additional          String? @db.VarChar(255)
  parent_street_address            String? @db.VarChar(255)
  parent_apt_suite_unit            String? @db.VarChar(255)
  parent_city                      String? @db.VarChar(255)
  parent_state                     String? @db.VarChar(255)
  parent_zipcode                   String? @db.VarChar(255)

  tag tags?
}

model zip_download_urls {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamp(6)

  zip_file_name String @db.VarChar(255)
  zip_file_url  String @db.VarChar(255)
  num_of_tags   Int    @default(1)

  tags tags[]
}
